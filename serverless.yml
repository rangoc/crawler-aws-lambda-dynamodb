service: zzzcg

custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    JOBS_TABLE: ${self:custom.stage}-jobs

provider:
  name: aws
  runtime: nodejs10.x
  environment: ${self:custom.settings}
  region: eu-central-1
  iamRoleStatements: 
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.JOBS_TABLE}"

functions:
  test:
    handler: handler.crawler 
    timeout: 20
  lambdaForStream:
    handler: handler2.streamReader
    timeout: 300

resources: 
  Resources:
    lambdaForStream:
      Properties:
        Role:
          Fn::GetAtt: [ LambdaRole, Arn ]
    LambdaRole:
      Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              Resource: "*"
    JobsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
            - AttributeName: "id"
              AttributeType: "S"
            KeySchema:
            - AttributeName: "id"
              KeyType: "HASH"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            StreamSpecification:
              StreamViewType: NEW_IMAGE
            TableName: ${self:custom.settings.JOBS_TABLE}
    JobsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [ JobsTable , StreamArn ]
      FunctionName:
        Fn::GetAtt: [ lambdaForStream , Arn ]
      StartingPosition: LATEST
          
